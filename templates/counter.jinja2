/*
 * {{group.name}}/{{group.alias}}/main.c
 * Automatically generated file
 */

#include "board.h"
#include <halm/pwm.h>
#include <halm/timer.h>
#include <xcore/memory.h>
/*----------------------------------------------------------------------------*/
static void onTimerOverflow(void *argument)
{
  *(bool *)argument = true;
}
/*----------------------------------------------------------------------------*/
int main(void)
{
  bool event = false;

  boardSetupClockExt();

  const struct Pin led = pinInit(BOARD_LED);
  pinOutput(led, BOARD_LED_INV);

{%- if config.COUNTER_SUFFIX is defined %}

  struct Timer * const counterTimer = boardSetupCounterTimer{{config.COUNTER_SUFFIX}}();
{%- else %}

  struct Timer * const counterTimer = boardSetupCounterTimer();
{%- endif %}
  timerEnable(counterTimer);

{%- if config.PWM_SUFFIX is defined %}

  struct PwmPackage pwm = boardSetupPwm{{config.PWM_SUFFIX}}(false);
{%- else %}

  struct PwmPackage pwm = boardSetupPwm(false);
{%- endif %}
  pwmSetEdges(pwm.output, 0, timerGetOverflow(pwm.timer) / 2);
  pwmEnable(pwm.output);
  timerEnable(pwm.timer);

  const uint32_t outFrequency =
      timerGetFrequency(pwm.timer) / timerGetOverflow(pwm.timer);
  const uint32_t maxCounterValue = (outFrequency + outFrequency / 100) / 10;
  const uint32_t minCounterValue = (outFrequency - outFrequency / 100) / 10;

  struct Timer * const eventTimer = boardSetupTimer();
  timerSetOverflow(eventTimer, timerGetFrequency(eventTimer) / 10);
  timerSetCallback(eventTimer, onTimerOverflow, &event);
  timerEnable(eventTimer);

  while (1)
  {
    while (!event)
      barrier();
    event = false;

    const uint32_t frequency = timerGetValue(counterTimer);
    timerSetValue(counterTimer, 0);

    if (frequency >= minCounterValue && frequency <= maxCounterValue)
      pinWrite(led, !BOARD_LED_INV);
    else
      pinWrite(led, BOARD_LED_INV);
  }

  return 0;
}
