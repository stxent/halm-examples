/*
 * {{group.name}}/{{group.alias}}/main.c
 * Automatically generated file
 */

#include "board.h"
#include <halm/generic/spi.h>
#include <halm/timer.h>
#include <xcore/memory.h>
#include <assert.h>
/*----------------------------------------------------------------------------*/
static void onTimerOverflow(void *argument)
{
  *(bool *)argument = true;
}
/*----------------------------------------------------------------------------*/
static void onTransferCompleted(void *argument)
{
  ++(*(unsigned int *)argument);
}
/*----------------------------------------------------------------------------*/
int main(void)
{
  static const uint32_t testSpiRate = 400000;
  static const uint8_t testSpiMode = 3;
  static const bool testZerocopyMode = true;

  [[maybe_unused]] enum Result res;
  unsigned int value = 0;
  bool event = false;

  boardSetupClockPll();

  const struct Pin cs = pinInit(BOARD_SPI_CS);
  pinOutput(cs, true);
  const struct Pin led = pinInit(BOARD_LED);
  pinOutput(led, BOARD_LED_INV);

  struct Interface * const spi = boardSetupSpi();
  res = ifSetParam(spi, IF_RATE, &testSpiRate);
  assert(res == E_OK);
  res = ifSetParam(spi, IF_SPI_MODE, &testSpiMode);
  assert(res == E_OK);

  if (testZerocopyMode)
  {
    ifSetParam(spi, IF_ZEROCOPY, NULL);
    ifSetCallback(spi, onTransferCompleted, &value);
  }

  struct Timer * const timer = boardSetupTimer();
  timerSetOverflow(timer, timerGetFrequency(timer) / 4);
  timerSetCallback(timer, onTimerOverflow, &event);
  timerEnable(timer);

  while (1)
  {
    while (!event)
      barrier();
    event = false;

    const uint32_t buffer = toBigEndian32(value);

    pinToggle(led);
    pinReset(cs);
    ifWrite(spi, &buffer, sizeof(buffer));
    pinSet(cs);
    pinToggle(led);

    if (!testZerocopyMode)
      ++value;
  }

  return 0;
}
