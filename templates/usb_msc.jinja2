/*
 * {{group.name}}/usb_msc/main.c
 * Automatically generated file
 */

#include "board.h"
#include <halm/generic/mmcsd.h>
#include <halm/timer.h>
#include <halm/usb/msc.h>
#include <xcore/memory.h>
#include <assert.h>
/*----------------------------------------------------------------------------*/
static uint8_t arena[16384];
/*----------------------------------------------------------------------------*/
struct InterfaceWrapperConfig
{
  /** Mandatory: underlying interface. */
  struct Interface *pipe;
  /** Mandatory: reception indication. */
  PinNumber rx;
  /** Mandatory: transmission indication. */
  PinNumber tx;
};

struct InterfaceWrapper
{
  struct Interface base;

  struct Interface *pipe;
  struct Pin rx;
  struct Pin tx;
};
/*----------------------------------------------------------------------------*/
static enum Result interfaceInit(void *, const void *);
static void interfaceSetCallback(void *, void (*)(void *), void *);
static enum Result interfaceGetParam(void *, int, void *);
static enum Result interfaceSetParam(void *, int, const void *);
static size_t interfaceRead(void *, void *, size_t);
static size_t interfaceWrite(void *, const void *, size_t);
static void onMassStorageEvent(void *);
static void onTimerOverflow(void *);
/*----------------------------------------------------------------------------*/
const struct InterfaceClass * const InterfaceWrapper =
    &(const struct InterfaceClass){
    .size = sizeof(struct InterfaceWrapper),
    .init = interfaceInit,
    .deinit = NULL, /* Default destructor */

    .setCallback = interfaceSetCallback,
    .getParam = interfaceGetParam,
    .setParam = interfaceSetParam,
    .read = interfaceRead,
    .write = interfaceWrite
};
/*----------------------------------------------------------------------------*/
static enum Result interfaceInit(void *object, const void *configBase)
{
  const struct InterfaceWrapperConfig * const config = configBase;
  assert(config != NULL);
  assert(config->pipe != NULL);

  struct InterfaceWrapper * const interface = object;

  interface->pipe = config->pipe;

  interface->rx = pinInit(config->rx);
  pinOutput(interface->rx, BOARD_LED_INV);

  interface->tx = pinInit(config->tx);
  pinOutput(interface->tx, BOARD_LED_INV);

  return E_OK;
}
/*----------------------------------------------------------------------------*/
static void interfaceSetCallback(void *object, void (*callback)(void *),
    void *argument)
{
  struct InterfaceWrapper * const interface = object;
  ifSetCallback(interface->pipe, callback, argument);
}
/*----------------------------------------------------------------------------*/
static enum Result interfaceGetParam(void *object, int parameter, void *data)
{
  struct InterfaceWrapper * const interface = object;
  return ifGetParam(interface->pipe, parameter, data);
}
/*----------------------------------------------------------------------------*/
static enum Result interfaceSetParam(void *object, int parameter,
    const void *data)
{
  struct InterfaceWrapper * const interface = object;

  switch ((enum IfParameter)parameter)
  {
    case IF_RELEASE:
      pinWrite(interface->rx, BOARD_LED_INV);
      pinWrite(interface->tx, BOARD_LED_INV);
      break;

    default:
      break;
  }

  return ifSetParam(interface->pipe, parameter, data);
}
/*----------------------------------------------------------------------------*/
static size_t interfaceRead(void *object, void *buffer, size_t length)
{
  struct InterfaceWrapper * const interface = object;

  pinWrite(interface->rx, !BOARD_LED_INV);
  return ifRead(interface->pipe, buffer, length);
}
/*----------------------------------------------------------------------------*/
static size_t interfaceWrite(void *object, const void *buffer, size_t length)
{
  struct InterfaceWrapper * const interface = object;

  pinWrite(interface->tx, !BOARD_LED_INV);
  return ifWrite(interface->pipe, buffer, length);
}
/*----------------------------------------------------------------------------*/
static void onMassStorageEvent(void *argument)
{
  *(bool *)argument = true;
}
/*----------------------------------------------------------------------------*/
static void onTimerOverflow(void *argument)
{
  *(bool *)argument = true;
}
/*----------------------------------------------------------------------------*/
int main(void)
{
  static const uint32_t SDMMC_RATE = 6000000;
  static const bool USE_BUSY_TIMER = true;
  static const bool USE_WIDE_BUS = true;

  struct Interface *card = NULL;
  enum Result res;
  bool event = true;

  boardSetupClockPll();

  const struct Pin cdLed = pinInit(BOARD_LED_2);
  pinOutput(cdLed, !BOARD_LED_INV);

  /* Configure the timer for timeout calculations */
  struct Timer * const busyTimer = USE_BUSY_TIMER ?
      boardSetupAdcTimer() : NULL;

  /* Initialize SDMMC layer */
  struct Interface * const sdio = boardSetupSdio(USE_WIDE_BUS, busyTimer);
  res = ifSetParam(sdio, IF_RATE, &SDMMC_RATE);
  assert(res == E_OK);
  (void)res; /* Suppress warning */

  /* Wrapper for indication of SDIO read/write operations */
  const struct InterfaceWrapperConfig wrapperConfig = {
      .pipe = sdio,
      .rx = BOARD_LED_1,
      .tx = BOARD_LED_0
  };
  struct Interface * const wrapper = init(InterfaceWrapper, &wrapperConfig);
  assert(wrapper != NULL);

  /* Configure the timer for mount events */
  struct Timer * const eventTimer = boardSetupTimer();
  timerSetOverflow(eventTimer, timerGetFrequency(eventTimer) * 2);
  timerSetCallback(eventTimer, onTimerOverflow, &event);
  timerEnable(eventTimer);

  /* Initialize USB peripheral */
  struct Entity * const usb = boardSetupUsb();

  /* Initialize Mass Storage Device */
  const struct MscConfig config = {
      .device = usb,

      .arena = arena,
      .size = sizeof(arena),

      .endpoints = {
          .rx = BOARD_USB_MSC_RX,
          .tx = BOARD_USB_MSC_TX
      }
  };
  struct Msc * const msc = init(Msc, &config);
  assert(msc != NULL);
  mscSetCallback(msc, onMassStorageEvent, &event);

  usbDevSetConnected(usb, true);

  while (1)
  {
    while (!event)
      barrier();
    event = false;

    if (card == NULL)
    {
      /* Initialize SD Card layer */
      const struct MMCSDConfig cardConfig = {
          .interface = wrapper,
          .crc = true
      };

      pinWrite(cdLed, BOARD_LED_INV);
      card = init(MMCSD, &cardConfig);

      if (card != NULL)
      {
        res = ifSetParam(card, IF_ZEROCOPY, NULL);
        assert(res == E_OK);
        (void)res; /* Suppress warning */

        mscAttachUnit(msc, 0, card);
      }

      if (card == NULL)
        pinWrite(cdLed, !BOARD_LED_INV);
    }
    else
    {
      if (mscIsUnitFailed(msc, 0))
      {
        mscDetachUnit(msc, 0);

        deinit(card);
        card = NULL;

        pinWrite(cdLed, !BOARD_LED_INV);
      }
    }
  }

  return 0;
}
