/*
 * {{group.name}}/i2c/main.c
 * Automatically generated file
 */

#include "board.h"
#include <halm/delay.h>
#include <halm/generic/i2c.h>
#include <halm/timer.h>
#include <xcore/interface.h>
#include <xcore/memory.h>
#include <assert.h>
#include <string.h>
/*----------------------------------------------------------------------------*/
#define ADDRESS_SIZE    2
#define DEVICE_ADDRESS  0x50
#define DEVICE_RATE     400000
/*----------------------------------------------------------------------------*/
static bool checkBuffer(uint8_t *buffer, size_t length, uint8_t iteration)
{
  for (size_t i = 0; i < length; ++i)
  {
    if (buffer[i] != (uint8_t)(iteration + i))
      return false;
  }

  return true;
}
/*----------------------------------------------------------------------------*/
static void fillBuffer(uint8_t *buffer, size_t length, uint8_t iteration)
{
  for (size_t i = 0; i < length; ++i)
    buffer[i] = (uint8_t)(iteration + i);
}
/*----------------------------------------------------------------------------*/
static void deviceConfigIO(struct Interface *interface, bool zerocopy)
{
  [[maybe_unused]] enum Result res;

  res = ifSetParam(interface, IF_ADDRESS, &(uint32_t){DEVICE_ADDRESS});
  assert(res == E_OK);
  res = ifSetParam(interface, IF_RATE, &(uint32_t){DEVICE_RATE});
  assert(res == E_OK);
  res = ifSetParam(interface, zerocopy ? IF_ZEROCOPY : IF_BLOCKING, NULL);
  assert(res == E_OK);
}
/*----------------------------------------------------------------------------*/
static void deviceRead(struct Interface *interface, uint32_t position,
    void *buffer, size_t length, bool zerocopy)
{
  uint8_t packet[ADDRESS_SIZE];

  for (size_t i = 0; i < ADDRESS_SIZE; ++i)
    packet[i] = position >> ((ADDRESS_SIZE - 1 - i) * 8);

  deviceConfigIO(interface, zerocopy);

  if (!zerocopy)
  {
    if (ifWrite(interface, packet, sizeof(packet)) == sizeof(packet))
      ifRead(interface, buffer, length);
  }
  else
  {
    ifWrite(interface, packet, sizeof(packet));
    udelay(2 * 9 * 1000 * (sizeof(packet) + 1) / (DEVICE_RATE / 1000));

    if (ifGetParam(interface, IF_STATUS, NULL) != E_OK)
    {
      ifSetParam(interface, IF_I2C_BUS_RECOVERY, NULL);
      return;
    }

    ifRead(interface, buffer, length);
    udelay(2 * 9 * 1000 * (length + 1) / (DEVICE_RATE / 1000));

    if (ifGetParam(interface, IF_STATUS, NULL) != E_OK)
      ifSetParam(interface, IF_I2C_BUS_RECOVERY, NULL);
  }
}
/*----------------------------------------------------------------------------*/
static void deviceWrite(struct Interface *interface, uint32_t position,
    const void *buffer, size_t length, bool zerocopy)
{
  uint8_t packet[length + ADDRESS_SIZE];

  for (size_t i = 0; i < ADDRESS_SIZE; ++i)
    packet[i] = position >> ((ADDRESS_SIZE - 1 - i) * 8);
  memcpy(packet + ADDRESS_SIZE, buffer, length);

  deviceConfigIO(interface, zerocopy);
  ifWrite(interface, packet, sizeof(packet));

  if (zerocopy)
  {
    udelay(2 * 9 * 1000 * (sizeof(packet) + 1) / (DEVICE_RATE / 1000));

    if (ifGetParam(interface, IF_STATUS, NULL) != E_OK)
      ifSetParam(interface, IF_I2C_BUS_RECOVERY, NULL);
  }
}
/*----------------------------------------------------------------------------*/
static void onTimerOverflow(void *argument)
{
  *(bool *)argument = true;
}
/*----------------------------------------------------------------------------*/
int main(void)
{
  static const bool testZerocopyMode = true;

  uint8_t buffer[16];
  uint8_t iteration = 0;
  bool event = false;

  boardSetupClockPll();

  const struct Pin led = pinInit(BOARD_LED);
  pinOutput(led, BOARD_LED_INV);

  struct Interface * const i2c = boardSetupI2C();

  struct Timer * const timer = boardSetupTimer();
  timerSetOverflow(timer, timerGetFrequency(timer));
  timerSetCallback(timer, onTimerOverflow, &event);
  timerEnable(timer);

  while (1)
  {
    while (!event)
      barrier();
    event = false;

    pinWrite(led, !BOARD_LED_INV);

    /* Write memory page */
    fillBuffer(buffer, sizeof(buffer), iteration);
    deviceWrite(i2c, 0, buffer, sizeof(buffer), testZerocopyMode);

    /* Wait for page program operation */
    mdelay(10);

    /* Read and verify memory page */
    memset(buffer, 0, sizeof(buffer));
    deviceRead(i2c, 0, buffer, sizeof(buffer), testZerocopyMode);

    if (checkBuffer(buffer, sizeof(buffer), iteration))
      pinWrite(led, BOARD_LED_INV);

    iteration += sizeof(buffer);
  }

  return 0;
}
