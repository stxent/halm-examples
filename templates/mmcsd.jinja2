/*
 * {{group.name}}/mmcsd/main.c
 * Automatically generated file
 */

#include "board.h"
#include <halm/generic/mmcsd.h>
#include <halm/timer.h>
#include <xcore/memory.h>
#include <assert.h>
#include <stdalign.h>
#include <string.h>
/*----------------------------------------------------------------------------*/
#ifndef BOARD_LED_1
#  define BOARD_LED_1 BOARD_LED_0
#endif

#define BLOCK_SIZE  512
#define ARENA_SIZE  (BLOCK_SIZE * 4)

/* Buffer should be aligned on a size of a DMA burst transfer */
static alignas(64) uint8_t arena[ARENA_SIZE];
/*----------------------------------------------------------------------------*/
static void markBuffer(uint8_t *buffer, size_t size, uint32_t iteration)
{
  static const char begin[] = {'\x00', '\x11', '\x22', '\x33'};
  static const char end[] = {'\xCC', '\xDD', '\xEE', '\xFF'};

  uint8_t hex[sizeof(iteration) * 2];
  uint8_t *iterator = hex;

  for (int i = sizeof(iteration) * 2 - 1; i >= 0; --i)
  {
    const uint8_t nibble = iteration >> (i * 4);
    *iterator++ = nibble < 10 ? nibble + '0' : nibble + 'A' - 10;
  }

  memset(buffer + sizeof(begin) + sizeof(hex), 0,
      size - sizeof(begin) - sizeof(end) - sizeof(hex) * 2);
  memcpy(buffer, begin, sizeof(begin));
  memcpy(buffer + sizeof(begin), hex, sizeof(hex));
  memcpy(buffer + size - sizeof(hex) - sizeof(end), end, sizeof(end));
  memcpy(buffer + size - sizeof(hex), hex, sizeof(hex));
}
/*----------------------------------------------------------------------------*/
static void onDataEvent(void *argument)
{
  *(bool *)argument = true;
}
/*----------------------------------------------------------------------------*/
static void onTimerOverflow(void *argument)
{
  *(bool *)argument = true;
}
/*----------------------------------------------------------------------------*/
static bool dataRead(struct Interface *card, uint8_t *buffer, size_t length,
    uint64_t position)
{
  bool event = false;

  ifSetParam(card, IF_POSITION_64, &position);
  ifSetCallback(card, onDataEvent, &event);

  const size_t count = ifRead(card, buffer, length);
  bool completed = false;

  if (count == length)
  {
    while (!event)
      barrier();
    event = false;

    if (ifGetParam(card, IF_STATUS, NULL) == E_OK)
      completed = true;
  }

  ifSetCallback(card, NULL, NULL);
  return completed;
}
/*----------------------------------------------------------------------------*/
static bool dataWrite(struct Interface *card, uint8_t *buffer, size_t length,
    uint64_t position)
{
  bool event = false;

  ifSetParam(card, IF_POSITION_64, &position);
  ifSetCallback(card, onDataEvent, &event);
  markBuffer(buffer, length, position / length);

  const size_t count = ifWrite(card, buffer, length);
  bool completed = false;

  if (count == length)
  {
    while (!event)
      barrier();
    event = false;

    if (ifGetParam(card, IF_STATUS, NULL) == E_OK)
      completed = true;
  }

  ifSetCallback(card, NULL, NULL);
  return completed;
}
/*----------------------------------------------------------------------------*/
int main(void)
{
  static const uint32_t testSdioRate = 6000000;
  static const bool testBusyTimer = true;
  static const bool testWideBus = true;
  static const bool testWriteMode = false;

  enum Result res;
  bool event = true;

  boardSetupClockPll();

#ifdef BOARD_LED_2
  const struct Pin cdLed = pinInit(BOARD_LED_2);
  pinOutput(cdLed, !BOARD_LED_INV);
#else
  const struct Pin cdLed = pinStub();
#endif

  const struct Pin rxLed = pinInit(BOARD_LED_1);
  pinOutput(rxLed, BOARD_LED_INV);
  const struct Pin txLed = pinInit(BOARD_LED_0);
  pinOutput(txLed, BOARD_LED_INV);

  /* Configure the timer for timeout calculations */
  struct Timer * const busyTimer = testBusyTimer ?
      boardSetupAdcTimer() : NULL;

  /* Initialize SDMMC layer */
  struct Interface * const sdio = boardSetupSdio(testWideBus, busyTimer);
  res = ifSetParam(sdio, IF_RATE, &testSdioRate);
  assert(res == E_OK);

  /* Configure the timer for read/write events */
  struct Timer * const eventTimer = boardSetupTimer();
  timerSetOverflow(eventTimer, timerGetFrequency(eventTimer) * 2);
  timerSetCallback(eventTimer, onTimerOverflow, &event);
  timerEnable(eventTimer);

  struct Interface *card = NULL;
  uint64_t capacity = 0;
  uint64_t position = 0;

  /* Suppress warning */
  (void)res;

  while (1)
  {
    while (!event)
      barrier();
    event = false;

    bool unmount = false;

    if (card == NULL)
    {
      /* Initialize SD Card layer */
      const struct MMCSDConfig cardConfig = {
          .interface = sdio,
          .crc = true
      };

      if (pinValid(cdLed))
        pinWrite(cdLed, BOARD_LED_INV);
      pinWrite(rxLed, BOARD_LED_INV);
      pinWrite(txLed, BOARD_LED_INV);
      card = init(MMCSD, &cardConfig);

      if (card != NULL)
      {
        bool ok = true;

        capacity = 0;
        position = 0;

        if (ifSetParam(card, IF_ZEROCOPY, NULL) != E_OK)
          ok = false;
        if (ifGetParam(card, IF_SIZE_64, &capacity) != E_OK || !capacity)
          ok = false;

        if (!ok)
        {
          deinit(card);
          card = NULL;
        }
      }

      if (pinValid(cdLed) && card == NULL)
        pinWrite(cdLed, !BOARD_LED_INV);
    }

    /* Write test */
    if (testWriteMode && card != NULL)
    {
      bool ok = true;

      pinWrite(txLed, !BOARD_LED_INV);

      /* Single-block write */
      if (!dataWrite(card, arena, BLOCK_SIZE, position))
        ok = false;

      /* Multi-block write */
      if (!dataWrite(card, arena, ARENA_SIZE, position))
        ok = false;

      if (ok)
        pinWrite(txLed, BOARD_LED_INV);
      else
        unmount = true;
    }

    /* Read test */
    if (card != NULL)
    {
      bool ok = true;

      pinWrite(rxLed, !BOARD_LED_INV);

      /* Single-block read */
      if (!dataRead(card, arena, BLOCK_SIZE, position))
        ok = false;

      /* Multi-block read */
      if (!dataRead(card, arena, ARENA_SIZE, position))
        ok = false;

      if (ok)
        pinWrite(rxLed, BOARD_LED_INV);
      else
        unmount = true;
    }

    if (unmount)
    {
      deinit(card);
      card = NULL;
    }

    /* Increment position */
    if (card != NULL)
    {
      position += ARENA_SIZE;
      if (position >= capacity)
        position = 0;
    }
  }

  return 0;
}
