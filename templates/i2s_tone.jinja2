/*
 * {{group.name}}/i2s_tone/main.c
 * Automatically generated file
 */

#include "board.h"
#include <xcore/interface.h>
#include <xcore/stream.h>
#include <assert.h>
#include <string.h>
/*----------------------------------------------------------------------------*/
struct EventTuple
{
  struct Stream *stream;
  struct Pin led;
};
/*----------------------------------------------------------------------------*/
static const int16_t patternL[] = {
         0,   2337,   4663,   6965,
      9231,  11450,  13611,  15703,
     17715,  19636,  21457,  23169,
     24763,  26231,  27565,  28758,
     29805,  30701,  31439,  32018,
     32433,  32683,  32767,  32683,
     32433,  32018,  31439,  30701,
     29805,  28758,  27565,  26231,
     24763,  23169,  21457,  19636,
     17715,  15703,  13611,  11450,
      9231,   6965,   4663,   2337,
         0,  -2337,  -4663,  -6965,
     -9231, -11450, -13611, -15703,
    -17715, -19636, -21457, -23169,
    -24763, -26231, -27565, -28758,
    -29805, -30701, -31439, -32018,
    -32433, -32683, -32767, -32683,
    -32433, -32018, -31439, -30701,
    -29805, -28758, -27565, -26231,
    -24763, -23169, -21457, -19636,
    -17715, -15703, -13611, -11450,
     -9231,  -6965,  -4663,  -2337
};

static const int16_t patternR[] = {
         0,  17715,  29805,  32433,
     24763,   9231,  -9231, -24763,
    -32433, -29805, -17715
};

#define BUFFER_COUNT  2
#define CHANNEL_COUNT 2
#define BUFFER_LENGTH (ARRAY_SIZE(patternL) * 4)

static int16_t rxBuffers[BUFFER_COUNT][BUFFER_LENGTH * CHANNEL_COUNT];
static int16_t txBuffers[BUFFER_COUNT][BUFFER_LENGTH * CHANNEL_COUNT];
/*----------------------------------------------------------------------------*/
static void onDataReceived(void *argument, struct StreamRequest *request,
    enum StreamRequestStatus)
{
  struct EventTuple * const context = argument;

  request->length = 0;
  streamEnqueue(context->stream, request);
  pinToggle(context->led);
}
/*----------------------------------------------------------------------------*/
static void onDataSent(void *argument, struct StreamRequest *request,
    enum StreamRequestStatus)
{
  struct EventTuple * const context = argument;

  request->length = request->capacity;
  streamEnqueue(context->stream, request);
  pinToggle(context->led);
}
/*----------------------------------------------------------------------------*/
static void fillBuffers(void)
{
  static_assert(ARRAY_SIZE(patternL) >= ARRAY_SIZE(patternR),
      "Incorrect pattern size");
  static_assert(!(ARRAY_SIZE(patternL) % ARRAY_SIZE(patternR)),
      "Incorrect pattern size");

  for (size_t buffer = 0; buffer < BUFFER_COUNT; ++buffer)
  {
    for (size_t index = 0; index < BUFFER_LENGTH; ++index)
    {
      txBuffers[buffer][index * 2 + 0] = patternL[index % ARRAY_SIZE(patternL)];
      txBuffers[buffer][index * 2 + 1] = patternR[index % ARRAY_SIZE(patternR)];
    }
  }

  memset(rxBuffers, 0, sizeof(rxBuffers));
}
/*----------------------------------------------------------------------------*/
int main(void)
{
  static const uint32_t testI2SRate = 44100;

  boardSetupClockPll();
  fillBuffers();

  struct Pin rxLed = pinInit(BOARD_LED_0);
  pinOutput(rxLed, BOARD_LED_INV);
  struct Pin txLed = pinInit(BOARD_LED_1);
  pinOutput(txLed, BOARD_LED_INV);

  struct StreamPackage audio = boardSetupI2S();
  [[maybe_unused]] enum Result res;

  res = ifSetParam(audio.interface, IF_RATE, &testI2SRate);
  assert(res == E_OK);

  struct EventTuple rxContext = {
      .stream = audio.rx,
      .led = rxLed
  };
  struct EventTuple txContext = {
      .stream = audio.tx,
      .led = txLed
  };

  struct StreamRequest rxRequests[2] = {
      {
          BUFFER_LENGTH * CHANNEL_COUNT * sizeof(int16_t),
          0,
          onDataReceived,
          &rxContext,
          &rxBuffers[0]
      }, {
          BUFFER_LENGTH * CHANNEL_COUNT * sizeof(int16_t),
          0,
          onDataReceived,
          &rxContext,
          &rxBuffers[1]
      }
  };
  struct StreamRequest txRequests[2] = {
      {
          BUFFER_LENGTH * CHANNEL_COUNT * sizeof(int16_t),
          0,
          onDataSent,
          &txContext,
          &txBuffers[0]
      }, {
          BUFFER_LENGTH * CHANNEL_COUNT * sizeof(int16_t),
          0,
          onDataSent,
          &txContext,
          &txBuffers[1]
      }
  };

  /* Enqueue buffers */
  rxRequests[0].length = 0;
  streamEnqueue(audio.rx, &rxRequests[0]);
  txRequests[0].length = txRequests[0].capacity;
  streamEnqueue(audio.tx, &txRequests[0]);

  rxRequests[1].length = 0;
  streamEnqueue(audio.rx, &rxRequests[1]);
  txRequests[1].length = txRequests[1].capacity;
  streamEnqueue(audio.tx, &txRequests[1]);

  while (1);
  return 0;
}
