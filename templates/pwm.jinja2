/*
 * {{group.name}}/pwm/main.c
 * Automatically generated file
 */

#include "board.h"
#include <halm/pwm.h>
#include <halm/timer.h>
/*----------------------------------------------------------------------------*/
static void onTimerOverflow(void *argument)
{
  static const uint32_t pwmLevelMap[] = {0, 2, 4, 6, 8, 10, 12, 14, 16};
  static uint32_t iteration = 0;

  struct PwmPackage * const pwm = argument;
  const uint32_t resolution = timerGetOverflow(pwm->timer);
  const uint32_t duration =
      (iteration / ARRAY_SIZE(pwmLevelMap)) % ARRAY_SIZE(pwmLevelMap);
  uint32_t leading = iteration % ARRAY_SIZE(pwmLevelMap);
  uint32_t trailing = leading + duration;

  if (trailing >= ARRAY_SIZE(pwmLevelMap))
    trailing -= ARRAY_SIZE(pwmLevelMap);
  leading = pwmLevelMap[leading] * resolution / 16;
  trailing = pwmLevelMap[trailing] * resolution / 16;

  if (pwm->outputs[1] != NULL)
    pwmSetEdges(pwm->outputs[1], 0, leading);

  if (pwm->outputs[2] != NULL)
    pwmSetEdges(pwm->outputs[2], leading, trailing);

  ++iteration;
}
/*----------------------------------------------------------------------------*/
static void onUnitOverflow(void *argument)
{
  pinToggle(*(const struct Pin *)argument);
}
/*----------------------------------------------------------------------------*/
int main(void)
{
  static const bool testPwmCentered = false;

  boardSetupClockExt();

  struct Pin led = pinInit(BOARD_LED);
  pinOutput(led, BOARD_LED_INV);

{%- if config.PWM_SUFFIX is defined %}

  struct PwmPackage pwm = boardSetupPwm{{config.PWM_SUFFIX}}(testPwmCentered);
{%- else %}

  struct PwmPackage pwm = boardSetupPwm(testPwmCentered);
{%- endif %}
  timerSetCallback(pwm.timer, onUnitOverflow, &led);
  timerSetFrequency(pwm.timer, 100000);
  timerSetOverflow(pwm.timer, 100);
  timerEnable(pwm.timer);

  /* Reference PWM output */
  pwmSetEdges(pwm.outputs[0], 0, timerGetOverflow(pwm.timer) / 2);
  pwmEnable(pwm.outputs[0]);

  if (pwm.outputs[1] != NULL)
  {
    /* Single-edge PWM output */
    pwmSetEdges(pwm.outputs[1], 0, 0);
    pwmEnable(pwm.outputs[1]);
  }

  if (pwm.outputs[2] != NULL)
  {
    /* Double-edge PWM output */
    pwmSetEdges(pwm.outputs[2], 0, 0);
    pwmEnable(pwm.outputs[2]);
  }

  struct Timer * const eventTimer = boardSetupTimer();
  timerSetOverflow(eventTimer, timerGetFrequency(eventTimer));
  timerSetCallback(eventTimer, onTimerOverflow, &pwm);
  timerEnable(eventTimer);

  while (1);
  return 0;
}
